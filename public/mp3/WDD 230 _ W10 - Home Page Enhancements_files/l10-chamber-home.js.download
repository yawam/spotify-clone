// #region Set HTML Elements ******************************************
const student = document.querySelector('#student');
const getReportButton = document.querySelector('#getReport');
const report = document.querySelector('#report');
const message = document.querySelector('#message');
// #endregion Set HTML Elements ***************************************

getReportButton.addEventListener('click', getReport);
document.addEventListener('keypress', function (e) {
  if (e.key === 'Enter') {
    getReport();
  }
});

function checkURL(url) {
  return fetch(url)
    .then(res => res.ok)
    .catch(err => false);
}

async function getReport() {
  resetReport();
  let studentgh = student.value;
  if (studentgh === "") {
    student.focus();
    return;
  }
  else {
    let uri = `${studentgh}.github.io/wdd230/chamber/`;
    let url = `https://${uri}`;
    let rescheck = await checkURL(url);
    if (rescheck) {
      const cssStats = await cssstats(uri);
      report.innerHTML += buildReport(cssStats, uri);
    } else {
      message.style.display = 'block';
      return;
    }
  }
}

async function cssstats(baseuri) {
  let url = `https://cssstats.com/api/stats?url=${baseuri}`;
  let response = await fetch(url);
  let cssresult = await response.json();
  return cssresult;
}

function resetReport() {
  message.style.display = 'none';
  report.textContent = '';
}

// #region Utility Functions ******************************************
function getSemanticElements(html) {
  let found = '';
  let semanticElements = ['<article', '<aside', '<details', '<figcaption', '<figure', '<footer', '<header', '<hgroup', '<main', '<mark', '<nav', '<section', '<summary', '<time'];
  semanticElements.forEach(element => {
    if (html.includes(element)) {
      let base = element.substring(1);
      found += `${base}, `;
    }
  });
  return found;
}

function getElement(html, element) {
  let count = 0;
  let i = 0;
  while (true) {
    let elementIndex = html.indexOf(element, i);
    if (elementIndex === -1) break;
    count++;
    i = elementIndex + 1;
  }
  return count;
}
function getContent(html, regex) {
  let match = html.match(regex);
  return match ? match[1] : null;
}

async function validateHTML(h) {
  let url = `https://validator.w3.org/nu/?out=json`;
  let response = await fetch(url, {
    method: 'POST',
    headers: {
      'Content-Type': 'text/html'
    },
    body: h
  });
  if (response.status !== 200 || !response.ok) {
    throw new Error(`Validation failed with status code ${response.status}`);
  }
  let hResult = await response.json();

  return hResult.messages.reduce((count, message) => {
    return message.type === 'error' ? count + 1 : count;
  }, 0);

}

async function validateCSS(uri) {
  let url = `https://jigsaw.w3.org/css-validator/validator?uri=${uri}&profile=css3svg&usermedium=all&output=json`;
  let response = await fetch(url);
  if (response.status !== 200 || !response.ok) {
    throw new Error(`Validation failed with status code ${response.status}`);
  }
  let cResult = await response.json();
  let cssErrorCount = cResult.cssvalidation.result.errorcount;

  return cssErrorCount;
}
// #endregion Utility Functions ***************************************

function buildReport(data, url) {
  let h = data.css.html;
  h = h.replace(/[\n\r]/g, ''); // remove line breaks
  h = h.replace(/ {2,}/g, ' '); // remove extra spaces
  let csslinks = '';
  data.css.links.forEach(css => {
    csslinks += `${css.link}<br>`
  });

  let htmlErrorCount, cssErrorCount;

  validateHTML(h)
    .then((htmlErrorCount) => {
      document.getElementById('hvalid').innerHTML = (htmlErrorCount === 0) ? '✅' : '❌';
      document.getElementById('htmlerrorscount').innerHTML = `Errors: ${htmlErrorCount}`;
    })
    .catch((error) => {
      document.getElementById('htmlerrorscount').innerHTML = `HTML Validation failed to report: ${error}`;
    });

  validateCSS(url)
    .then((cssErrorCount) => {
      document.getElementById('cvalid').innerHTML = (cssErrorCount === 0) ? '✅' : '❌';
      document.getElementById('csserrorscount').innerHTML = `Errors: ${cssErrorCount}`;
    })
    .catch((error) => {
      document.getElementById('csserrorscount').innerHTML = `CSS Validation failed to report: ${error}`;
    });

  return `<main>
      <h3>w3.org Validation Tools</h3>
      <div class="label">HTML</div>
      <div class="data" id="hvalid"></div>
      <div class="standard"> <span class="blue" id="htmlerrorscount"></span> 🔗<a href="https://validator.w3.org/check?verbose=1&uri=${url}" target="_blank">HTML Validation Link</a>
      </div>

      <div class="label">CSS</div>
      <div class="data" id="cvalid"></div>
      <div class="standard"><span class="blue" id="csserrorscount"></span> 🔗<a href="https://jigsaw.w3.org/css-validator/validator?uri=${url}" target="_blank">CSS Validation Link</a>
      </div>

      <div class="label">Link Checker</div>
      <div class="data">🔗</div>
      <div class="standard"><a href="https://validator.w3.org/checklink?uri=${url}&hide_type=all&depth=&check=Check" target="_blank">w3.org Link Checker</a>
      </div>

      <h3>HTML Document</h3>
      <div class="label">Document Type:</div>
      <div class="data">${h.includes('<!DOCTYPE html>') || h.includes('<!doctype html>') ? '✅' : '❌'}</div>
      <div class="standard">&lt;!DOCTYPE html&gt; or &lt;!doctype html&gt; <span class="blue">This should be on the first line.</span></div>

      <div class="label">HTML Lang Attribute:</div>
      <div class="data">${h.includes('<html lang="') && h.indexOf('<html') < h.indexOf('<head') ? '✅' : '❌'}</div>
      <div class="standard">&lt;html lang="en-US"&gt; <span class="blue">Encases the entire document</span></div>

      <div class="label">&lt;head&gt; element</div>
      <div class="data">${h.includes('<head>') && h.includes('</head>') && h.indexOf('</head>') < h.indexOf('<body') ? '✅' : '❌'}</div>
      <div class="standard">&lt;head&gt; ... &lt;/head&gt; <span class="blue">Start tag and end tag before the &lt;body&gt; element</span></div>

      <div class="label">&lt;body&gt; element</div>
      <div class="data">${h.includes('<body') && h.includes('</body>') && h.indexOf('</body>') < h.indexOf('</html>') ? '✅' : '❌'}</div>
      <div class="standard">&lt;body&gt; ... &lt;/body&gt; <span class="blue">Closes before the closing &lt;/html&gt; element</span></div>

      <h3>&lt;head&gt; Elements</h3>

      <div class="label">Meta Charset:</div>
      <div class="data">${h.includes('<meta charset="utf-8"') || h.includes('<meta charset="UTF-8"') ? '✅' : '❌'}</div>
      <div class="standard"><span class="blue">&lt;meta charset="UTF-8"&gt;</span></div>

      <div class="label">Meta Viewport:</div>
      <div class="data">${h.includes('<meta name="viewport" content="') ? '✅' : '❌'}</div>
      <div class="standard"><span class="blue">&lt;meta name="viewport" content="width=device-width,initial-scale=1.0"&gt;</span></div>

      <div class="label">&lt;title&gt;</div>
      <div class="data">${data.css.pageTitle.toLowerCase().includes('chamber of commerce') ? '👀' : '❌'}</div>
      <div class="standard">${data.css.pageTitle} <span class="blue">Includes the characters 'Chamber of Commerce'</span></div>

      <div class="label">Meta Description:</div>
      <div class="data">${h.includes('<meta name="description"') ? '👀' : '❌'}</div>
      <div class="standard">${getContent(h, /<meta\s+name="description"\s+content="([^"]+)"/i)} <span class="blue">Review for relevance</span></div>

      <div class="label">Meta Author:</div>
      <div class="data">${h.includes('name="author"') ? '✅' : '❌'}</div>
      <div class="standard">${getContent(h, /<meta\s+name="author"\s+content="([^"]+)"/i)}</div>

      <div class="label">Favorite Icon:</div>
      <div class="data">${h.includes('<link rel="icon" href="') ? '✅' : '❌'}</div>
      <div class="standard">${getContent(h, /<link\s+rel="icon"\s+href="([^"]+)"/i)} <span class="blue">Check render.</span></div>

      <div class="label">Meta OG Title</div>
      <div class="data">${h.includes('<meta property="og:title" content="') ? '✅' : '❌'}</div>
      <div class="standard">${getContent(h, /<meta\s+property="og:title"\s+content="([^"]+)"/i)}</div>

      <div class="label">Meta OG Type</div>
      <div class="data">${h.includes('<meta property="og:type" content="website">') ? '✅' : '❌'}</div>
      <div class="standard">${getContent(h, /<meta\s+property="og:type"\s+content="([^"]+)"/i)}</div>

      <div class="label">Meta OG Image</div>
      <div class="data">${h.includes('<meta property="og:image" content="https://') ? '✅' : '❌'}</div>
      <div class="standard"><a href="${getContent(h, /<meta\s+property="og:image"\s+content="([^"]+)"/i)}" target="_blank">${getContent(h, /<meta\s+property="og:image"\s+content="([^"]+)"/i)}</a> <span class="blue">Check Link</span></div>

      <div class="label">Meta OG URL</div>
      <div class="data">${h.includes('<meta property="og:url" content="https://') ? '✅' : '❌'}</div>
      <div class="standard">${getContent(h, /<meta\s+property="og:url"\s+content="([^"]+)"/i)}</div>

      <div class="label">External CSS:</div>
      <div class="data">${data.css.links.length >= 3 ? '✅' : '❌'}</div>
      <div class="standard"> ${csslinks} : <span class="blue">3+: Check order</span></div>

      <div class="label">Media Queries:</div>
      <div class="data">📑</div>
      <div class="standard">Total: ${data.stats.mediaQueries.total}, Unique: ${data.stats.mediaQueries.unique}</div>

      <h3>&lt;body&gt; Elements</h3>

      <div class="label">&lt;header&gt;</div>
      <div class="data">${h.includes('<header') && h.includes('</header>') && h.indexOf('</header>') < h.indexOf('<main') ? '✅' : '❌'}</div>
      <div class="standard"></div>

      <div class="label">&lt;nav&gt;</div>
      <div class="data">${h.includes('<nav') && h.includes('</nav>') ? '✅' : '❌'}</div>
      <div class="standard"></div>

      <div class="label">&lt;main&gt;</div>
      <div class="data">${h.includes('<main') && h.includes('</main>') && h.indexOf('<main') > h.indexOf('</header>') ? '✅' : '❌'}</div>
      <div class="standard"></div>

      <div class="label">&lt;footer&gt;</div>
      <div class="data">${h.includes('<footer') && h.includes('</footer>') && h.indexOf('<footer') > h.indexOf('</main>') ? '✅' : '❌'}</div>
      <div class="standard"></div>

      <div class="label">&lt;h1&gt;</div>
      <div class="data">${getElement(h, '</h1>') === 1 && getContent(h, /<h1.*>(.*?)<\/h1>/).includes("Chamber of Commerce") ? '✅' : '❌'}</div>
      <div class="standard">${getElement(h, '</h1>')} / 1 “${getContent(h, /<h1.*>(.*?)<\/h1>/)}” <span class="blue">Must contain the city/municipality name and the words "Chamber of Commerce"</span></div>

      <div class="label">srcset</div>
      <div class="data">${h.includes('srcset') ? '✅' : '❌'}</div>
      <div class="standard">srcset used</div>



    </main>`;
}